{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-flexible-robotics","title":"Welcome to Flexible Robotics","text":""},{"location":"assignments/","title":"Assignments","text":""},{"location":"assignments/#homework-assignments","title":"Homework Assignments","text":"<p>There will be homework assignments throughout the course. The homework assignments are mostly going to be implemented in Python and its related packages. The homework assignments will be on (1) initial prototyping, (2) kinematics, (3) dynamics, (4) parameter identification, (5) design optimization, (6) prototyping and testing. The individual assignments are intended to introduce concepts discussed in class whereas the team projects are intended to reinforce the students on the concepts. </p>"},{"location":"course-info/01-syllabus/","title":"Syllabus","text":"<p>BILKENT UNIVERSITY MECHANICAL ENGINEERING DEPARTMENT ME 473 Flexible Robotics Syllabus -- Fall 2023/2024  </p>"},{"location":"course-info/01-syllabus/#general-information","title":"General Information","text":"<p>Credit Units: 3 ECTS Credit Units: 5 Prerequisites: CS 115, ME 341  </p> <p>Instructor: Dr. Daniel Aukes Office: EA-131 Phone: TBD E-mail: danaukes@asu.edu </p> <p>Lectures: 10:30-12:30 Tuesday, 3:30-4:30 Thursday Office Hours: By appointment Textbook: Compliant Mechanisms by Larry L. Howell, Wiley Press, 1^st^ Ed. (Suggested)</p>"},{"location":"course-info/01-syllabus/#course-description","title":"Course Description","text":"<p>Design and manufacturing of flexible mechanisms. Biomechanics and bioinspiration. Kinematics and dynamics of robots and mechanisms. Mechanics and the effects of compliance on robot dynamics. Design optimization and system identification for flexible robots. Experimental validation of flexible robots.</p>"},{"location":"course-info/01-syllabus/#course-objectives","title":"Course Objectives","text":"<p>Having successfully completed this course, the student will learn the following:</p> <ol> <li>Using bio-inspired approaches in the development and design of mechanisms</li> <li>Understanding the kinematic relationships between forces and motion for rigid mechanical systems</li> <li>Understanding the relationships between force and deflection in flexible systems</li> <li>Being able to build and use physics-based models for understanding the dynamic motion of robotic systems</li> <li>Understanding how the limitations of fabrication processes translate to design constraints and guidelines for flexible systems.</li> <li>The basics of data collection and experiment design</li> <li>How to use optimization approaches in solving a robotics design problem.</li> </ol>"},{"location":"course-info/01-syllabus/#me-department-objectives-and-outcomes-coverage","title":"ME Department Objectives and Outcomes Coverage","text":"<p>This course primarily contributes to Mechanical Engineering program outcomes that develop student abilities to:</p> <p>a. An ability to identify, formulate, and solve complex engineering problems by applying principles of engineering, science, and mathematics, b. An ability to apply engineering design to produce solutions that meet specified needs with consideration of public health, safety, and welfare, as well as global, cultural, social, environmental, and economic factors, c. An ability to communicate effectively with a range of audiences, e. An ability to function effectively on a team whose members together provide leadership, create a collaborative and inclusive environment, establish goals, plan tasks, and meet objectives, f. An ability to develop and conduct appropriate experimentation, analyze and interpret data, and use engineering judgment to draw conclusions, g. An ability to acquire and apply new knowledge as needed, using appropriate learning strategies,  </p>"},{"location":"course-info/01-syllabus/#course-organization","title":"Course Organization","text":""},{"location":"course-info/01-syllabus/#grading","title":"Grading","text":"Item % Homework assignments and quizzes (6 counts -- initial prototyping, kinematics, dynamics, parameter identification, design optimization, final prototyping and testing) 20% Project 1 (initial prototyping of a flexible robot, kinematics modeling, dynamics modeling) 20% Project 2 (compliance modeling, design and manufacturing workflow, design optimization, experiment design, data collection and analysis) 20% Midterm exam 20% Final exam (includes all topics from the course, to be held during the final exam period) 20% Total 100%"},{"location":"course-info/01-syllabus/#fz-grade","title":"FZ Grade","text":"<p>No FZ grade is given in this course.</p>"},{"location":"course-info/01-syllabus/#homework-assignments","title":"Homework Assignments","text":"<p>There will be homework assignments throughout the course. The homework assignments are mostly going to be implemented in Python and its related packages. The homework assignments will be on (1) initial prototyping, (2) kinematics, (3) dynamics, (4) parameter identification, (5) design optimization, (6) prototyping and testing. The individual assignments are intended to introduce concepts discussed in class whereas the team projects are intended to reinforce the students on the concepts. Plagiarism and cheating will be severely punished.</p>"},{"location":"course-info/01-syllabus/#term-projects","title":"Term Projects","text":"<p>There will be two projects within this course. The first project involves the initial design of a flexible robotic mechanism, an idealized kinematic analysis of the design and its dynamic modeling. The second project will include the effects of flexibility in the robot dynamics, the fabrication of a flexible robot, and its testing phases. The students have the option to redefine their designs in the second project. The groups will be given a fixed budget to complete the projects and will not be allowed to go over budget. The first project is expected to be theoretical whereas the second project is expected to be more practical. The students will make a demo of their second project at the end of the semester. Students will work in groups of 3-4.</p>"},{"location":"course-info/01-syllabus/#exams","title":"Exams","text":"<ul> <li>Will include all topics from the course up to that point</li> <li>Will be held during the designated exam period / during a class period*</li> </ul> <p>* Specific date/time will be announced in advance.</p>"},{"location":"course-info/01-syllabus/#make-up-exam-policy","title":"Make-up Exam Policy","text":"<p>There will be no make-up exam unless a documentable extreme medical or family emergency exists.  You must contact the instructor prior* to the exam, or no credit will be given for a missed exam.</p> <p>* 1 day notice minimum</p>"},{"location":"course-info/01-syllabus/#in-class-laboratories-and-tutorial-sessions","title":"In-Class Laboratories and Tutorial Sessions","text":"<p>In laboratory work, the students will apply the methods introduced in class to prototype simple flexible mechanisms as well as to learn validation techniques. In tutorials, the students will model and simulate robots in Python environment, apply optimization techniques, and perform system identification.</p> <p>Students are expected to come to the lab and tutorial sessions with a laptop capable of running Python.</p>"},{"location":"course-info/01-syllabus/#course-policies","title":"Course Policies","text":""},{"location":"course-info/01-syllabus/#attendance","title":"Attendance","text":"<p>Attendance will be taken during lectures and labs. Excused absences will be given for documented medical reasons, university-related travel, or job interview travel. Documentation must be in the form requested by the university (doctor report, travel ticket, etc.).</p> <p>It should also be noted that attendance is extremely important, and irregular attendance always results in poor or mediocre performance.</p>"},{"location":"course-info/01-syllabus/#late-penalities","title":"Late Penalities","text":"<p>Each concept in this class builds on the last, so failing to turn in an assignment on time affects you and your teammates.</p> <ul> <li>It is your responsibility to get in touch with the instructor regarding any questions before assignments are due.  </li> <li>Late submissions will lose one letter grade(10%) for every day they are late.  </li> <li>Any sumbission more than four days late will receive a zero. </li> </ul>"},{"location":"course-info/01-syllabus/#course-honor-code","title":"Course Honor Code","text":"<p>Plagiarism and cheating are not acceptable in the classroom and will be severely punished.</p>"},{"location":"course-info/01-syllabus/#specific-rules","title":"Specific Rules","text":"<ul> <li>Do your own work for individual assignments and tests.</li> <li>Include the your sources of inspiration within assignments and projects.  This will help grow the list of cool references, but more importantly, help distinguish inspiration from wholesale plagarism.</li> <li>Keep code/text/information you use from outside sources separate from your own original content (through the use of separate folders, for example).  Make it explicit what is yours and what is not.</li> <li>Include all the licenses or copyright statements as required by the things you reuse.  This will make your own code more reuseable for yourself and potentially others in the future.</li> <li>See academic handbook for more info.</li> </ul>"},{"location":"course-info/01-syllabus/#how-to-succeed-in-this-course","title":"How to Succeed in this Course","text":"<ul> <li>Attend all class sessions.</li> <li>Complete all pre-class preparation assignments and reading.</li> <li>Complete all post-class follow up assignments and reading.</li> <li>Participate in tutorial sessions and office hours.</li> <li>Check your school email regularly.</li> <li>Log in to the course websites at least once each week.</li> <li>Communicate proactively with your instructor.</li> <li>Create a study schedule so that you don\u2019t fall behind on assignments.</li> </ul>"},{"location":"course-info/01-syllabus/#schedule","title":"Schedule","text":"<p>The class schedule can be found on the course website.  It is subject to change, and will be updated regularly. It is your responsibility to keep track of all due dates and times.</p>"},{"location":"course-info/01-syllabus/#tentative-course-outline-might-change-depending-on-the-progression-of-the-course","title":"Tentative Course Outline (might change depending on the progression of the course)","text":"Week/Date Topics Covered Week 1 Introduction, flexible robot history, flexible robot fabrication methods Week 2 Biomechanics: muscles, workloops, inverted pendulum vs. SLIP, gaits, scaling laws. Manufacturing introduction Week 3 Biomechanics: bioinspiration in robotics. Kinematics: introduction, DoF, joints, linkages, mechanisms Week 4 Project I topics discussions. Kinematics: Jacobians, vectors and vector operations, loop closure equations Week 5 Kinematics: rotations and reference frames, constraints. Week 6 Dynamics: dyads, dyadics, mass and inertia, energy Week 7 Dynamics: forces, mass and inertia, triple pendulum example, project I presentations Week 8 Dynamics: modeling Week 9 Mechanics and compliance. Week 10 Fabrication tutorial. Manufacturing. Week 11 Manufacturing computation and algorithms in Python. Week 12 Tutorials (Tracker, FEA, Mass and inertia and Solidworks, Pseudo-rigid body modeling) Week 13 Design optimization and final prototyping. Week 14 Experimental validation. Student demonstrations. Week 15/16 FINAL EXAM"},{"location":"course-info/01-syllabus/#course-logistics","title":"Course Logistics","text":""},{"location":"course-info/01-syllabus/#software","title":"Software","text":"<ul> <li>You will be expected to install and use either the Anaconda distribution of Python, or use google colab, for completing all assignments and following along in class.</li> <li>This class is friendly to all operating systems.  Students have used Window, Ubuntu or OS/X on their own in the past with no problems.</li> <li>Please see the software list posted on the course site for more information about required and recommended software.  The software listed is either open-source and freely available to download, available through Bilkent, or free for student use.</li> </ul>"},{"location":"course-info/01-syllabus/#computers","title":"Computers","text":"<p>It is expected that you can bring a laptop to class to complete in-class programming tasks.  </p>"},{"location":"course-info/01-syllabus/#materials","title":"Materials","text":"<ul> <li>Students will be responsible for selecting and obtaining the consumable materials used in their project, such as cardboard, adhesive, plastic, etc.  </li> <li>We may be able to supply a limited number of parts and materials which can be used for development, but if students wish to keep their robots they will need to purchase their own components.</li> </ul>"},{"location":"course-info/01-syllabus/#equipment","title":"Equipment","text":"<p>Special equipment for making laminate robots may be available for use on campus at your discretion.  If you wish to use the tools and equipment you will need to pass all safety training required by the University.</p>"},{"location":"course-info/01-syllabus/#copyright","title":"Copyright","text":"<p>All course content and materials, including lectures are copyrighted materials. Students may not share outside the class, upload to online websites not approved by the instructor, sell, or distribute course content.</p>"},{"location":"course-info/01-syllabus/#notice","title":"Notice","text":"<p>Information in this syllabus is subject to change with reasonable advance notice.</p>"},{"location":"lectures/","title":"Lectures","text":""},{"location":"lectures/#class-1-welcome-and-introduction","title":"Class 1: Welcome and Introduction","text":"<ul> <li>Welcome to Flexible Robotics</li> <li>Go over syllabus<ul> <li>Discuss Course topics</li> </ul> </li> <li>Discuss course logistics<ul> <li>Discuss software-based tools<ul> <li>python</li> </ul> </li> <li>Discuss parts and materials</li> </ul> </li> <li>Go over course websites</li> <li>Lecture: Intro to Flexible Robotics </li> </ul> <p>After:</p> <ul> <li>Share Prior course projects</li> <li>Release Survey</li> <li>Release Assignment 1</li> </ul>"},{"location":"lectures/#class-2-prototyping-and-kinematics-i","title":"Class 2: Prototyping and Kinematics I","text":"<p>Before Class:</p> <ul> <li>bring materials</li> </ul> <p>Class:</p> <ul> <li>Minutae<ul> <li>Discuss Assignment 1</li> <li>Installing Python tutorial / task</li> <li>ffmpeg</li> <li>Discuss Survey</li> <li>Discuss Solidworks or autodesk fusion?</li> </ul> </li> <li>Activity: Prototyping Exercise I<ul> <li>parts/materials needed:<ul> <li>cardstock(recommended), cardboard, or thick paper</li> <li>staplers</li> <li>tape/gluesticks</li> <li>scissors</li> </ul> </li> </ul> </li> <li>Lecture: Kinematics I<ul> <li>Mechanisms</li> <li>Linkages</li> <li>Joints<ul> <li>types</li> <li>Degrees of Freedom</li> </ul> </li> <li>System Degrees of Freedom<ul> <li>counting</li> </ul> </li> <li>Origami and Kirigami equivalents</li> </ul> </li> </ul>"},{"location":"lectures/#class-3-classical-robot-kinematics","title":"Class 3: Classical Robot Kinematics","text":"<ul> <li>Lecture: Classical Robot Kinematics<ul> <li>Joints</li> <li>Links</li> <li>DH Parameters</li> <li>Rotations</li> <li>Translations</li> <li>Jacobians</li> <li>Quaternions</li> <li>Open-loop kinematics</li> <li>Inverse Kinematics</li> </ul> </li> </ul>"},{"location":"lectures/lecture-01/","title":"Lecture 1 Notes","text":""},{"location":"lectures/lecture-01/#vocabulary-from-the-board","title":"Vocabulary from the Board","text":"<ul> <li>Reflected inertia</li> <li>Continuum</li> <li>RHEX Robot</li> <li>Cost of Transport (COT)</li> <li>Degrees of Freedom (DOF)</li> <li>Strain</li> <li>Material</li> <li>Adaptive: responds to forces</li> <li>Flexible</li> <li>Stiff materials vs. stiff systems</li> <li>Passive</li> </ul>"},{"location":"lectures/lecture-01/#2021-2022-foldable-robotics-projects","title":"2021-2022 Foldable Robotics Projects","text":"Team Website Final Presentation 1 https://ajcrouch.github.io/SalamaderRobot.github.io/ https://www.youtube.com/watch?v=GTOWfeRm0v4 2 https://aniiot.github.io/Foldable_Robotics_Team_2_Swimming/ https://www.youtube.com/watch?v=5slSRJoQ5 3 https://schen304joseph.github.io/team3.github.io/ https://www.youtube.com/watch?v=SO6cIK69wg0 4 https://matt-nolan11.github.io/ https://www.youtube.com/watch?v=7N7I_g8Vz8A 5 https://bornamm.github.io/EGR557.Gripper.github.io/ https://bornamm.github.io/EGR557.Gripper.github.io/Finalpresentation.mp4 6 https://tessellationrobot.github.io/ https://www.youtube.com/watch?v=nSZbOi5HaqA 7 n/a https://www.youtube.com/watch?v=6jy8N0BB_gE"},{"location":"tutorials/python/01-installing-anaconda-python/","title":"Miniconda/Anaconda (Python) Installation Tutorial","text":"","tags":["python","programming"]},{"location":"tutorials/python/01-installing-anaconda-python/#introduction","title":"Introduction","text":"<p>This tutorial is for installing the anaconda python distribution on windows.</p>","tags":["python","programming"]},{"location":"tutorials/python/01-installing-anaconda-python/#windows-installation","title":"Windows Installation","text":"<p>These installation instructions are for computers that do not have Python or Anaconda installed already. Python and Anaconda do not come installed by default on most computers so if you haven't installed them intentionally, these instructions likely apply to you. If you do have another version of Python installed, then please ask Dr.\u00a0Aukes for further details.</p>","tags":["python","programming"]},{"location":"tutorials/python/01-installing-anaconda-python/#anaconda-instructions","title":"Anaconda Instructions","text":"<p>Note: These instructions are for the smaller \"Miniconda\" distribution, that includes only the <code>conda</code> package manager that you can use to install only the packages that you want.  You can also install the full Anaconda distribution, and follow the same basic instructions.</p> <ol> <li> <p>Download and install miniconda (win64 quick link) with the following options:</p> <p> </p> <ol> <li> <p>Install for \"Just for Me\" </p> <p></p> </li> <li> <p>Accept the the default directory (e.g., C:\\ProgramData\\Miniconda3 )</p> <p></p> </li> <li> <p>Keep the options page default, ensuring the \"Register Miniconda3 as the system Python\" box is checked</p> <p></p> </li> <li> <p>Complete the installation</p> <p></p> <p></p> </li> </ol> </li> <li> <p>Update Conda. In Windows, go to the search bar and type \"cmd\". Once you see the Command Prompt app in the list, right click on it and choose \"Run as administrator\" from the contextual menu.</p> <p></p> </li> <li> <p>When the terminal opens, paste each of the following lines (one at a time) at the command prompt and press enter:</p> <pre><code>conda update --all\n</code></pre> </li> </ol>","tags":["python","programming"]},{"location":"tutorials/python/02-installing-packages/","title":"Installing Packages in Python","text":"<ol> <li> <p>Install additional software packages. In Windows, go to the search bar and type \"cmd\". Once you see the Command Prompt app in the list, right click on it and choose \"Run as administrator\" from the contextual menu.</p> <p></p> </li> <li> <p>When the terminal opens, paste each of the following lines (one at a time) at the command prompt and press enter:</p> <pre><code>conda install -y anaconda\nconda install -y pyqtgraph pyopengl pycairo shapely pyserial ffmpeg\nconda update -y --all\npython -m pip install --upgrade pip\npip install meshio pygmsh ezdxf pypdf4 pypoly2tri idealab_tools foldable_robotics\n</code></pre> </li> </ol>"},{"location":"tutorials/python/03-google-colab-tutorial/","title":"Google Colab Documentation","text":""},{"location":"tutorials/python/03-google-colab-tutorial/#resources","title":"Resources","text":"<ul> <li>Introduction to Colab and Python</li> <li>Getting Started with Google Colab</li> <li>External data: Local Files, Drive, Sheets, and Cloud Storage</li> <li>How to Connect Google Colab with Google Drive</li> <li>Embedding your image in google colab markdown</li> </ul>"},{"location":"tutorials/python/03-google-colab-tutorial/#what-is-google-colab","title":"What is Google Colab","text":"<p>\"Colaboratory is a free Jupyter notebook environment that requires no setup and runs entirely in the cloud. With Colaboratory you can write and execute code, save and share your analyses, and access powerful computing resources, all for free from your browser... As the name suggests, Google Colab comes with collaboration backed in the product. In fact, it is a Jupyter notebook that leverages Google Docs collaboration features. It also runs on Google servers and you don\u2019t need to install anything. Moreover, the notebooks are saved to your Google Drive account.\" [source]</p> <p>Advantages over Jupyter Notebook</p> <ul> <li>Simple installation and setup</li> <li>Easy integration with Google Drive and Github</li> <li>Cloud computing (use google servers and GPUs instead of your hardware)</li> <li>Automatically saves progress (in the event of power outage or computer freezes)</li> <li>Collaborative environment for group coding projects</li> <li>Persistent notebook version for all teammates</li> <li>Analogous to using Google Docs instead of Microsoft Word for group reports</li> <li>Plenty of quality of life tools without needing to install extensions</li> <li>Collapsible headings</li> <li>Live markdown preview</li> <li>Table of contents</li> <li>Coding tooltips: autofill defined variables</li> <li>Integrated Widget Cells: forms and sliders for easy data entry</li> <li>Scratch cell: A cell to run test code but which isn\u2019t saved in your notebook.</li> </ul>"},{"location":"tutorials/python/03-google-colab-tutorial/#initial-setup","title":"Initial Setup","text":""},{"location":"tutorials/python/03-google-colab-tutorial/#installing-google-colabatory","title":"Installing Google Colabatory","text":"<ol> <li>In google drive, go to New&gt;More&gt;Connect more apps</li> <li>Search for \"Colaboratory\"</li> <li>Install the drive add on</li> </ol>"},{"location":"tutorials/python/03-google-colab-tutorial/#starting-new-google-colab-notebook","title":"Starting new Google Colab Notebook","text":"<ol> <li>In google drive, go to New&gt;More&gt;Google Colaboratory</li> <li>This opens up a fresh  Google Colab Notebook in the drive directory you were currently in</li> <li>The file will be a <code>.ipynb</code> file and can be downloaded as a Jupyter Notebook to run on a local instance if needed (File&gt;Download .ipynb)</li> </ol>"},{"location":"tutorials/python/03-google-colab-tutorial/#importing-juypiter-notebook-file","title":"Importing Juypiter Notebook File","text":"<ol> <li>In google drive, go to New&gt;File Upload</li> <li>Double click the .ipynb file</li> <li>If it does not open the file with collabatory by default; right click&gt;Open With&gt;Google Collaboratory</li> </ol>"},{"location":"tutorials/python/03-google-colab-tutorial/#installing-dependencies","title":"Installing Dependencies","text":""},{"location":"tutorials/python/03-google-colab-tutorial/#pip-install-recommended","title":"pip Install (Recommended)","text":"<p>Google Colab comes with most standard packages by default but we can install additional packages using an exclamation mark.  In Google Colab, the exclamation mark \"!\" is used for executing commands from the underlying operating system.  This means that we can use this to execute the pip command and install packages for the current notebook.  For example, we can install the standard packages from the Foldable Robotics Website by following the same process but adding the modifier \"!\".</p> <p>RUN PIP INSTALL CODE BLOCK</p> <ol> <li> <p>Install standard packages...</p> <pre><code>!pip install meshio pygmsh ezdxf pandoc-fignos pandoc-eqnos pypdf4 service_identity ftd2xx pygithub twine paho-mqtt\n!pip install ntplib pygame pysftp pyserial\n</code></pre> </li> <li> <p>Install foldable-robotics-specific packages.</p> <pre><code>!pip install pypoly2tri idealab_tools foldable_robotics pynamics\n</code></pre> </li> </ol>"},{"location":"tutorials/python/03-google-colab-tutorial/#manual-install","title":"Manual Install","text":"<p>A package can be manually installed by adding the .whl file to Google Drive and using the pip command on this file. For convenience, it is probably best to add it to the same directory as the Google Colab file in your drive. To pip install a .whl file we just have to run the pip command and referencing the path to that file.</p> <p>Note: To access a file stored in your Google Drive, your google drive must be mounted to the google Colab notebook. For details regarding mounting our drive see the \"Mounting Drive to Google Colab\" section.</p> <p>DO NOT RUN IF ALREADY RAN COD IN PIP INSTALL SECTION</p> <pre><code>    from google.colab import drive\n</code></pre> <p>Where the drive will be mounted in the Colab notebook</p> <pre><code>    ROOT = '/content/drive'\n</code></pre> <p>Path to the file in YOUR DRIVE.  Will be different for you</p> <pre><code>    FILE_PATH = '/MyDrive/GoogleColabExample/pynamics-0.0.8-py2.py3-none-any.whl'\n</code></pre> <p>Accessing a file on your drive</p> <pre><code>    drive.mount(ROOT, force_remount=True) # Mount the drive to this notebook\n    with open(ROOT+FILE_PATH,'w') as f: # Open the file in the drive\n    !pip install f  # Run the pip install command for the file\n</code></pre> <p>This next command is to unmount my drive from th notebook so that it my personal files will not be made available if this Google Colab File is shared</p> <pre><code>    drive.flush_and_unmount()\n</code></pre>"},{"location":"tutorials/python/03-google-colab-tutorial/#verifying-imported-packages","title":"Verifying Imported Packages","text":"<p>RUN THIS CODE BLOCK TO ENSURE ALL PACKAGES ARE INSTALLED</p> <pre><code>    import pynamics\n    from pynamics.frame import Frame\n    from pynamics.variable_types import Differentiable,Constant\n    from pynamics.system import System\n    from pynamics.constraint import Constraint\n    from pynamics.output import PointsOutput\n\n    import sympy\n    import numpy as np\n    import matplotlib.pyplot as plt\n    import scipy.optimize\n\n    from math import pi\n</code></pre> <p>If there are no errors in the output, the packages have been properly installed</p> <p>Note: Packages that do not come installed by default will have to be reinstalled using the pip command for each new notebook.</p>"},{"location":"tutorials/python/03-google-colab-tutorial/#mounting-drive-to-google-colab","title":"Mounting Drive to Google Colab**","text":"<p>This section is only needed if you need to access external files that are located in your google drive</p> <p>In order for your Google Colab notebook to have access to the files on your Google Drive, you must first \"mount\" your drive to the notebook. This process can only mount the top-level drive to a notebook and it will expose all the files in your drive to the Google Colab notebook until it is unmounted. Therefore, it is recommended to always follow mounting your drive with the unmount command if you do not wish to leave the entirety of your drive accessible by a Google Colab notebook. As long as the variable used to store the imported file is not overwritten later in the script, the imported object will remain saved in the notebook.</p> <p>Note: When running the \"drive.mount(ROOT, force_remount=True)\" mount command, it will ask for authorization to mount the drive associated with the selected google acount.  The output of the code cell will provide instructions to complete this process.</p> <p>Disclaimer: Your drive will remain mounted to the Google Colab notebook until you unmount it.  That means people with access to the notebook will be able to access your drive until it is unmounted. Once unmounted, another party will not be able to access your drive since they would need to perform the authorization process which requires a sign in from your google account.</p>"},{"location":"tutorials/python/03-google-colab-tutorial/#mounting-and-unmounting-a-drive-using-a-code-block-reccomended","title":"Mounting and Unmounting a Drive Using a Code Block (Reccomended)","text":"<pre><code>    from google.colab import drive\n</code></pre> <p>Where the drive will be mounted in the Colab notebook</p> <pre><code>    ROOT = '/content/drive'\n</code></pre> <p>Path to the file in your drive.  Will be different for you</p> <pre><code>    FILE_PATH = '/MyDrive/Folder1/Folder2/file' \n    #FILE_PATH = '/Shareddrives/Folder1/Folder2/file'\n</code></pre> <p>Mount the drive to this notebook</p> <pre><code>    drive.mount(ROOT, force_remount=True)\n</code></pre> <p>Append full path</p> <pre><code>    full_path_to_file = ROOT+FILE_PATH\n</code></pre> <p>Example:</p> <pre><code>    ############################################\n    #### INSERT CODE TO PROCESS/IMPORT FILE ####\n    # EX1\n    import csv\n    data = csv.reader(full_path_to_file, delimiter=',')\n</code></pre> <p>Example Code</p> <pre><code>    # EX2\n    import cv2\n    img = cv2.imread(full_path_to_file)   \n    #### INSERT CODE TO PROCESS/IMPORT FILE ####\n    ############################################\n</code></pre> <p>Unmount Drive</p> <pre><code>    drive.flush_and_unmount()\n</code></pre> <p>As long as the variable used to import the file (data/img) is not overwritten or deleted, the variable can be used later in the code with an unmounted drive</p>"},{"location":"tutorials/python/03-google-colab-tutorial/#mounting-and-unmounting-a-drive-using-the-ui","title":"Mounting and Unmounting a Drive Using the UI","text":"<p>Alternatively, you can use the toolbar on the left to mount the drive to a notebook.  This does not require account verification since you are accessing the notebook through your google account. If you do not have any code cells that mount a drive. This can be done by</p> <ol> <li>Selecting the files button (folder icon)</li> <li>Selecting the Mount Drive button (dark folder with google drive icon)</li> <li>Giving permission for the notebook to access your Google Drive</li> </ol> <p>Note: This is not recommended since you will have to manually unmount your drive (using the mount button again) or execute the unmount command in a code block.</p>"},{"location":"tutorials/python/03-google-colab-tutorial/#version-control","title":"Version Control","text":""},{"location":"tutorials/python/03-google-colab-tutorial/#google-colabs-revision-history","title":"Google Colab's Revision History","text":"<p>Google Colab has an integrated version control through the ability to view revision history.  This is the same process as Google Docs in which you can restore any versions that have been automatically saved at regular intervals.  You can view the revision history by going to:</p> <p>File&gt;Revision History</p>"},{"location":"tutorials/python/03-google-colab-tutorial/#pushing-google-colab-notebook-to-github","title":"Pushing Google Colab Notebook to Github","text":"<p>Also, there is a github integration that commits the file to our github repository which automatically does version control for us through its commit history functionality. To commit a google colab file to github:</p> <ol> <li>In colab go to \"File&gt;Save Copy in Github\"</li> <li>Sign into your github account</li> <li>Select the repository where you want your notebook to be saved by using the dropdown box</li> <li> <p>You can append subdirectories in the \"File Path\" dialog box by appending \"folder_name/\" to the notebook's file name \"file_name.ipynb\"\"</p> <pre><code>EX: \"folder/file_name.ipynb\"\n</code></pre> </li> <li> <p>Select \"ok\" and the github repository will be updated with the new notebook</p> </li> </ol>"},{"location":"tutorials/python/03-google-colab-tutorial/#submitting-google-colab-notebook-to-canvas","title":"Submitting Google Colab Notebook to Canvas","text":""},{"location":"tutorials/python/03-google-colab-tutorial/#submitting-a-compiled-ipynb-file","title":"Submitting a Compiled .ipynb File","text":"<ol> <li>Download the Google Colab Notebook as a Jupyter Notebook file (.ipynb file).  From the Google Colab notebook, select File&gt;Download .ipynb</li> <li> <p>Upload file to canvas</p> </li> <li> <p>Referencing images and files can be slightly different in the Colab notebook (through direct html link or mounted drive) than in Jupyter Notebook (can include by referencing local directory).  </p> </li> <li>To the best of my knowledge the notebooks should be functionally identical with the exception of the mounting system</li> <li>I would like to ensure that the a compiled Google Colab Notebook is acceptable for submission before moving forward with it</li> </ol>"},{"location":"tutorials/python/03-google-colab-tutorial/#submitting-a-pdf-file","title":"Submitting a PDF File","text":"<p>I am currently unaware of a way to easily print a Google Colab Notebook using MiKTeX or other LaTeX typesetting system. Google Colab has a print function that is able to generate a PDF through html but I would assume that this would not be up to submission standards.</p> <ol> <li>Download the Google Colab Notebook as a Jupyter Notebook file (.ipynb file).  From the Google Colab notebook, select File&gt;Download .ipynb</li> <li>Open the downloaded file in a Jupyter Notebook Session</li> <li>Export the notebook as PDF.  File&gt;Download as&gt; PDF via LaTeX (.pdf)</li> </ol>"},{"location":"tutorials/python/03-google-colab-tutorial/#adding-images-to-google-colab-notebook","title":"Adding Images to Google Colab Notebook","text":""},{"location":"tutorials/python/03-google-colab-tutorial/#directly-embedding-image-using-copy-paste","title":"Directly Embedding Image using Copy &amp; Paste","text":"<p>Google Colab has a very useful of feature that is able to add an image to a text cell by pasting an image from your clipboard.  Once an image is pasted, Google Colab will insert the proper syntax for displaying an image embed the raw image data directly into the notebook.</p> <p>Note: Although not required, it is reccomended to have a pasted image be in its own markdown cell. This is because the image data in text format is very large and can be difficult to move relative to other text in the same cell. This can be seen by editing the text cell for the image (double click image) in sections 8.1 and 8.2.</p> <ol> <li>Copy image from web, screenclipping, or other source</li> <li>Start a new text cell</li> <li>Paste the image</li> </ol> <p></p>"},{"location":"tutorials/python/03-google-colab-tutorial/#adding-custom-images-from-google-drive-without-mounting","title":"Adding Custom Images from Google Drive without Mounting","text":"<p>Full Tutorial on how to embed images</p> <p>An alternative way to add a custom image to mounting your drive is to get a public link to an image saved on your drive. Once an image has been uploaded into your drive (does not matter where), follow the following steps:</p> <ol> <li>Right click the image in the drive</li> <li>Select \"Get Link\"</li> <li>Change the sharing settings from \"Restricted\" to \"Anyone with the link\"</li> <li> <p>Paste this link into a Google Drive Direct Link Generator (link to generator) or follow the steps below to find the direct link manually     a. Paste the link into any text editor</p> <pre><code>**EX:** https://drive.google.com/file/d/1jh9A3LRK8e3i982GhgzmRb4kYrvdTJti/view?usp=sharing\n</code></pre> <p>b. Copy the image ID (the long string of random alphanumeric characters)</p> <pre><code>**EX:** img_id = 1jh9A3LRK8e3i982GhgzmRb4kYrvdTJti\n</code></pre> <p>c. Append to the direct image link url: https://drive.google.com/uc?export=view&amp;id=\"img_id\"</p> <pre><code>**EX** https://drive.google.com/uc?export=view&amp;id=1jh9A3LRK8e3i982GhgzmRb4kYrvdTJti\n</code></pre> </li> <li> <p>Use markdown to display this image</p> <pre><code>    ![Image Example](https://drive.google.com/uc?export=view&amp;id=1jh9A3LRK8e3i982GhgzmRb4kYrvdTJti)\n</code></pre> </li> </ol>"},{"location":"tutorials/vscode-setup/","title":"VSCode Setup and Usage","text":"","tags":["vscode"]},{"location":"tutorials/vscode-setup/#installation","title":"Installation","text":"<p>Download from here</p> <p>Installation Options</p> <ul> <li>Accept the default installation path</li> <li>keep \"Register Code as an editor for supported file types\" checked</li> <li>keep \"Add to PATH\" checked</li> <li>other options: set to your preference</li> </ul>","tags":["vscode"]},{"location":"tutorials/vscode-setup/#ubuntu-specific","title":"Ubuntu-specific","text":"<pre><code>cd ~/Downloads\nsudo dpkg -i code_1.7* #.... tab complete\nsudo apt install -yf\n</code></pre>","tags":["vscode"]},{"location":"tutorials/vscode-setup/#useful-command-line-arguments","title":"Useful command-line arguments","text":"<p>Note: this only works if you added vscode to your system <code>PATH</code></p> <pre><code>Usage: code [options][paths...]\n</code></pre> <p>Example:</p> <pre><code>code -n ~/websites/danb0b.github.io/\n</code></pre> <p>will open a new folder with that path loaded in the explorer window</p> <pre><code>  -a --add &lt;folder&gt;      Add folder(s) to the last active window.\n  -n --new-window        Force to open a new window.\n  -r --reuse-window      Force to open a file or folder in an already opened window.\n  --extensions-dir &lt;dir&gt; Set the root path for extensions.\n  --list-extensions      List the installed extensions.\n  --show-versions        Show versions of installed extensions, when using --list-extensions.\n  --install-extension &lt;ext-id | path&gt; Installs or updates an extension. \n  --uninstall-extension &lt;ext-id&gt;      Uninstalls an extension.\n  --enable-proposed-api &lt;ext-id&gt;      Enables proposed API features for\n  --disable-extensions            Disable all installed extensions.\n  --disable-extension &lt;ext-id&gt;    Disable an extension.\n  --sync &lt;on | off&gt;               Turn sync on or off.\n</code></pre>","tags":["vscode"]},{"location":"tutorials/vscode-setup/#shortcuts","title":"Shortcuts","text":"Key Combination Description ctrl+shift+p opens the command window ctrl+shift+e opens explorer ctrl+shift+x opens extensions ctrl+shift+g opens git ctrl+shift+f opens search ctrl+shift+k remove line ctrl+shift+/ comment line: ctrl+up move line up ctrl+down move line down ctrl+k,v preview ctrl+shift+i format document ctrl+i italicize selection ctrl+b bold selection alt+z switch text wrap mode","tags":["vscode"]},{"location":"tutorials/vscode-setup/#extensions","title":"Extensions","text":"<p>from here</p> <p>open a terminal window and paste the following in:</p> <pre><code>code --install-extension redhat.vscode-yaml\ncode --install-extension yzane.markdown-pdf\ncode --install-extension yzhang.markdown-all-in-one\ncode --install-extension PKief.markdown-checkbox\ncode --install-extension bierner.markdown-yaml-preamble\ncode --install-extension Pycom.pymakr-preview\ncode --install-extension ms-python.python\ncode --install-extension shd101wyy.markdown-preview-enhanced\ncode --install-extension davidanson.vscode-markdownlint #highlight file problems\ncode --install-extension James-Yu.latex-workshop\ncode --install-extension ms-python.vscode-pylance\ncode --install-extension ms-toolsai.jupyter\ncode --install-extension ms-toolsai.jupyter-keymap\ncode --install-extension ms-toolsai.jupyter-renderers\ncode --install-extension ms-toolsai.vscode-jupyter-cell-tags\ncode --install-extension ms-toolsai.vscode-jupyter-slideshow\ncode --install-extension tamasfe.even-better-toml\ncode --install-extension tecosaur.latex-utilities\ncode --install-extension torn4dom4n.latex-support\n</code></pre> <pre><code>code --list-extensions\n</code></pre>","tags":["vscode"]},{"location":"tutorials/vscode-setup/#markdown-all-in-one","title":"Markdown all-in-one","text":"<p>go to settings @id:editor.defaultFormatter @lang:markdown formatter ctrl_+ shift + I then formats your document</p>","tags":["vscode"]},{"location":"tutorials/vscode-setup/#python","title":"Python","text":"<p>When working with multiple python environments, you should make sure to use the correct one for the task you are doing.  To do this, you will need to select from a list of python interpreters.  Type ctrl+shift+p then type / select \"python select interpreter\" from the list.</p> <ul> <li>https://code.visualstudio.com/docs/python/python-tutorial</li> <li>https://www.pythontutorial.net/getting-started/setup-visual-studio-code-for-python/</li> <li>https://theproductiveengineer.net/how-to-set-up-vs-code-for-python/</li> </ul>","tags":["vscode"]},{"location":"tutorials/vscode-setup/#debugging-python-code","title":"Debugging Python Code","text":"<p>see this reference to add a debug configuration</p>","tags":["vscode"]},{"location":"tutorials/vscode-setup/#pymaker","title":"pymaker","text":"<ol> <li> <p>install pymakr preview</p> <p><code>bash code --install-extension Pycom.pymakr-preview</code></p> </li> </ol>","tags":["vscode"]},{"location":"tutorials/vscode-setup/#getting-started-with-pymakr-from-here","title":"Getting Started with Pymakr (from here)","text":"<ol> <li>In File explorer(<code>ctrl+shift+e</code>)<ol> <li>add or create a project folder for holding your micropython code (suggestion: name it \"micropython\").  Consider creating one in your \"code\" git repository.</li> </ol> </li> <li> <p>navigate to \"Pymakr: Projects\" tab in the workspace explorer window on the left</p> <ol> <li> <p>select \"create project\".  Select the same code folder as above and specify a project name (like \"hello-world\").  Select the option to create a subdirectory with the micropython folder.</p> <p></p> <p></p> <p></p> </li> <li> <p>Connect your device via usb to your computer</p> </li> <li> <p>Within the \"hello-world\" project that is created within the \"Pymakr: Projects\" tab, add a new device. Follow the prompts to select the appropriate com port</p> <p></p> </li> <li> <p>Connect to the device by selecting the lightning bolt icon</p> <p></p> </li> <li> <p>Open up a terminal window by selecting the box with an arrow in it</p> <p></p> </li> <li> <p>A terminal window should open and look like this:</p> <p></p> <p>```python MicroPython v1.19.1 on 2022-06-18; ESP32 module with ESP32 Type \"help()\" for more information.</p> <p>```</p> </li> <li> <p>At the command prompt, type in</p> <p><code>python print('hello world')</code></p> <p>which should return</p> <p><code>python hello world</code></p> </li> <li> <p>If you wish to disconnect, you can use:</p> <p></p> </li> </ol> </li> </ol>","tags":["vscode"]},{"location":"tutorials/vscode-setup/#working-with-micropython","title":"Working with Micropython","text":"<p>Micropython can either run code from the interpreter (the \"terminal\" as VSCode puts it), or by loading a file from its onboard storage.  When the ESP32 is reset (using the EN button), it looks for two files, in a specific order:</p> <ol> <li>boot.py</li> <li>main.py</li> </ol> <p>if there are any loops in these files that prevent execution from ending, you must type <code>ctrl+c</code> to terminate execution from the interpreter window.  This will stop any python files from running and bring control back to the interpreter</p> <p>You must always stop execution on the ESP32 before trying to upload files to it.</p>","tags":["vscode"]},{"location":"tutorials/vscode-setup/#saving-files-tofrom-the-esp32","title":"Saving files to/from the ESP32","text":"<p>Within the \"Pymakr: Projects\" workspace there are several other buttons that you can use to sync files to the esp32</p> <ul> <li>Upload project to device: Uploads all your project files to the device</li> <li>Download project from device: Pulls files off the device</li> <li>Open in Explorer: This opens up the ESP32 as a virtual file system in the file explorer and allows you to investigate and work with the file system directly.</li> </ul> <p>From the file explorer window, you can also right click and select \"pymakr--&gt;upload to device\" to upload individual files</p>","tags":["vscode"]},{"location":"tutorials/vscode-setup/#external-resources","title":"External Resources","text":"<ul> <li>VSCode<ul> <li>Main Website</li> <li>Find help here</li> <li>Download from here</li> </ul> </li> <li>Pymakr &amp; ESP32<ul> <li>https://github.com/pycom/pymakr-vsc/blob/HEAD/GET_STARTED.md</li> <li>https://marketplace.visualstudio.com/items?itemName=pycom.Pymakr</li> <li>https://randomnerdtutorials.com/micropython-esp32-esp8266-vs-code-pymakr/</li> <li>https://lemariva.com/blog/2018/12/micropython-visual-studio-code-as-ide</li> <li>https://docs.espressif.com/projects/esp-idf/en/stable/esp32/get-started/vscode-setup.html</li> <li>https://stackoverflow.com/questions/67647095/how-to-setup-windows-10-vscode-pymakr-for-python-programming-micropython</li> </ul> </li> </ul>","tags":["vscode"]}]}